@page
@model JeBalance.Web.Pages.IndexModel

@section styles {
}

<div class="container">
    <h1 class="my-4">Gestion des VIP</h1>

    <!-- Formulaire pour consulter la liste des VIP -->
    <form id="consultationForm">
        <div class="mb-3">
            <label for="consultationToken" class="form-label">Token</label>
            <input type="text" class="form-control" id="consultationToken" name="consultationToken" placeholder="Saisissez votre token">
        </div>
        <button type="submit" class="btn btn-primary">Consulter la liste des VIP</button>
    </form>

    <!-- Liste des VIP -->
    <div id="vipList" class="mt-4">
        <!-- La liste des VIP sera affichée ici -->
    </div>

    <!-- Formulaire pour modifier le statut d'un VIP -->
    <form id="modificationForm">
        <div class="mb-3">
            <label for="modificationToken" class="form-label">Token</label>
            <input type="text" class="form-control" id="modificationToken" name="modificationToken" placeholder="Saisissez votre token">
        </div>
        <div class="mb-3">
            <label for="vipGuid" class="form-label">GUID de la personne VIP</label>
            <input type="text" class="form-control" id="vipGuid" name="vipGuid" placeholder="Saisissez le GUID">
        </div>
        <div class="mb-3">
            <label for="statut">Statut</label>
            <div class="form-check">
                <input type="radio" id="vipStatut" name="statut" value="VIP" class="form-check-input">
                <label class="form-check-label" for="vipStatut">VIP</label>
            </div>
            <div class="form-check">
                <input type="radio" id="standardStatut" name="statut" value="Standard" class="form-check-input">
                <label class="form-check-label" for="standardStatut">Standard</label>
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Modifier le statut</button>
    </form>
</div>

@section scripts {
    <script>document.getElementById('consultationForm').addEventListener('submit', async function (e) {
            e.preventDefault();
            var consultationToken = document.getElementById('consultationToken').value;

            try {
                const response = await fetch('/api/app/personne/personne-vip', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${consultationToken}`
                    }
                });

                if (!response.ok) {
                    // Si la réponse n'est pas OK, vérifiez si l'en-tête WWW-Authenticate est présent
                    const wwwAuthenticateHeader = response.headers.get('WWW-Authenticate');

                    if (wwwAuthenticateHeader) {
                        // Analysez le contenu de l'en-tête pour obtenir les détails de l'erreur
                        const errorDetails = parseWwwAuthenticateHeader(wwwAuthenticateHeader);
                        throw new Error(`Erreur d'authentification : ${errorDetails.error_description}`);
                    }

                    // Si l'en-tête WWW-Authenticate n'est pas présent, traitez le corps de la réponse comme JSON
                    const errorBody = await response.json();
                    throw new Error(errorBody.error);
                }

                const vipList = await response.json();
                document.getElementById('vipList').innerText = JSON.stringify(vipList, null, 2);
            } catch (error) {
                console.error('Une erreur s\'est produite :', error.message);
                // Afficher un message d'erreur sur la page
                document.getElementById('vipList').innerText = error.message;
            }
        });

        // Fonction pour analyser le contenu de l'en-tête WWW-Authenticate
        function parseWwwAuthenticateHeader(headerValue) {
            const details = {};
            const keyValuePairs = headerValue.split(',').map(pair => pair.trim());

            keyValuePairs.forEach(pair => {
                const [key, value] = pair.split('=');
                details[key] = value.replace(/"/g, '');
            });

            return details;
        }</script>

    <script>document.getElementById('modificationForm').addEventListener('submit', async function (e) {
            e.preventDefault();
            var modificationToken = document.getElementById('modificationToken').value;
            var vipGuid = document.getElementById('vipGuid').value;
            var statut = document.querySelector('input[name="statut"]:checked');

            if (!statut) {
                console.error('Veuillez sélectionner un statut VIP.');
                alert('Veuillez sélectionner un statut VIP.');
                return;
            }

            try {
                const response = await fetch(`/api/app/personne/${vipGuid}/modify-personne-vip-status?newVipStatus=${statut.value === 'vip'}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${modificationToken}`
                    }
                });

                if (!response.ok) {
                    // Si la réponse est un Bad Request, affichez un message approprié sans essayer de traiter le JSON
                    if (response.status === 400) {
                        const errorBody = await response.text();
                        console.warn(`Erreur lors de la modification du statut VIP : ${errorBody}`);
                        // Afficher un message d'avertissement sur la page

                        console.log('Contenu de la réponse :', errorBody);
                        alert('Erreur lors de la modification du statut VIP. Vérifiez les données fournies.');
                    } else {
                        const errorBody = await response.json();
                        throw new Error(`Erreur lors de la modification du statut VIP : ${errorBody.error}`);
                    }
                }

                // Vérifier si la réponse a une longueur positive avant de la traiter en tant que JSON
                if (response.headers.get('content-length') > 0) {
                    const result = await response.json();
                    // Afficher le résultat ou un message de succès sur la page
                    console.log(result);
                } else {
                    console.warn('La réponse était vide.');
                    // Afficher un message d'avertissement sur la page
                }
            } catch (error) {
                console.error('Une erreur s\'est produite :', error.message);
                // Afficher un message d'erreur sur la page
                alert('Une erreur s\'est produite lors de la modification du statut VIP.');
            }
        });</script>


}
